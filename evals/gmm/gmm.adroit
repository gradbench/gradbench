import "array" use
  array,
  concat,
  for,
  map,
  matrix,
  max,
  range,
  reshape,
  row,
  scan,
  slice,
  stack,
  sum,
  transpose,
  zeros,
import "math" use exp, float, int, lgamma, log, pi, sqr, sqrt

def logsumexp[K](x: [K]Float): Float =
  let mx = max[K](x)
  let emx = exp.(for[K, Float] (i: K) => x[i] - mx)
  log(sum[K](emx) + mx)

def logsumexpvec[K, N](x: [N * K]Float): [N]Float =
  for[N, Float] (i: N) => logsumexp[K](row[N, K, Float](x, i))

def log_gamma_distrib(a: Float, p: Int): Float =
  let out = (let p = float(p); 0.25 * p * (p - 1.0) * log(pi))
  out + sum[Int](map[Int, Int, Float](range(p), (i: Int) =>
    let j = i + 1
    lgamma(a + 0.5 * float(1 - j))
  ))

def log_wishart_prior[D, K]({
  p: Int,
  wishart_gamma: Float,
  wishart_m: Int,
  sum_qs: [K]Float,
  qdiags: [K * D]Float,
  ls: [K * D * D]Float,
}): Float =
  let n = p + wishart_m + 1
  let k = int[K]()

  let out = sum[K](
    0.5
    * wishart_gamma
    * wishart_gamma
    * (for[K, Float] (i: K) =>
      sum[D](sqr.(row[K, D, Float](qdiags, i)))
      + sum[D * D](sqr.(row[K, D * D, Float](ls, i)))
    )
    - float(wishart_m) * sum_qs
  )

  let c = float(n * p) * log(wishart_gamma / sqrt(2.0))
  out - float(k) * (c - log_gamma_distrib(0.5 * float(n), p))

def construct_l[D](icf: []Float): [D * D]Float =
  let d = int[D]()
  let cols = scan[Int * [D]Float, Int](
    (d, zeros[D]()), range(d - 1),
    ((j: Int, _: [D]Float), i: Int) =>
      let k = i + 1
      index K <- k
      let n = d - k
      j + n, reshape[D, K + Int, Float](
        concat[K, Int, Float](zeros[K](), slice[Float](icf, j, j + n))
      )
  )
  transpose[D, D, Float](
    stack[D, D, Float](
      reshape[D, Int, [D]Float](
        map[Int, Int * [D]Float, [D]Float](cols, (_: Int, v: [D]Float) => v)
      )
    )
  )

def qtimesx[D, K, N]({
  qdiag: [K * D]Float,
  l: [K * D * D]Float,
  x: [N * K * D]Float,
}): [N * K * D]Float =
  let f = for[N * K * D, Float] (m: N, i: K, j: D) =>
    sum[D](for[D, Float] (k: D) => l[i, j, k] * x[m, i, k])
  stack[N, K * D, Float](
    for[N, [K * D]Float] (i: N) => qdiag .* row[N, K * D, Float](x, i)
  ) + f

def gmm_objective[D, K, N]({
  alphas: [K]Float,
  means: [K * D]Float,
  qs: [K * D]Float,
  ls: [K * D * D]Float,
  x: [N * D]Float,
  wishart_gamma: Float,
  wishart_m: Int,
}): Float =
  let n = int[N]()
  let d = int[D]()

  let qdiags = exp.(qs)
  let sum_qs = for i => sum(for j => qs[i, j])

  let xcentered = stack(for (i, j) => row(x, i) - row(means, j))
  let lxcentered = qtimesx({qdiag = qdiags, l = ls, x = xcentered})
  let sqsum_lxcentered = for (i, j) => sum(for k => sqr(lxcentered[i, j, k]))
  let inner_term = stack(for i =>
    alphas + sum_qs - 0.5 * row(sqsum_lxcentered, i)
  )
  let lse = logsumexpvec(inner_term)
  let slse = sum(lse)

  let constant = -n * d * 0.5 * log(2 * pi)
  (
    constant
    + slse
    - n * logsumexp(alphas)
    + log_wishart_prior({p = d, wishart_gamma, wishart_m, sum_qs, qdiags, ls})
  )

def gmm({
  d: Int,
  k: Int,
  n: Int,
  alpha: []Float,
  means: [][]Float,
  icf: [][]Float,
  x: [][]Float,
  gamma: Float,
  m: Int,
}): Float =
  index D <- d
  index K <- k
  index N <- n
  gmm_objective({
    alphas = array(alpha),
    means = matrix(means),
    qs = matrix(map(icf, curr_icf => slice(curr_icf, 0, d))),
    ls = stack(reshape(map(icf, construct_l{D}))),
    x = matrix(x),
    wishart_gamma = gamma,
    wishart_m = m,
  })
